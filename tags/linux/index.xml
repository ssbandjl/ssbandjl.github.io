<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 晓兵</title>
    <link>https://logread.cn/tags/linux/</link>
    <description>Recent content in linux on 晓兵</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 18 Jun 2023 12:41:32 +0800</lastBuildDate><atom:link href="https://logread.cn/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux内核与DPDK-HTTP 性能对决(Linux Kernel vs DPDK: HTTP Performance Showdown)[译]</title>
      <link>https://logread.cn/post/linux/linux_kernel_vs_dpdk/</link>
      <pubDate>Sun, 18 Jun 2023 12:41:32 +0800</pubDate>
      
      <guid>https://logread.cn/post/linux/linux_kernel_vs_dpdk/</guid>
      <description>概述 在这篇文章中，我将使用一个简单的 HTTP 基准测试在 Linux 内核的网络堆栈和由 DPDK 提供支持的内核旁路堆栈之间进行正面性能比较。 我将使用 Seastar 运行我的测试，Seastar 是一个用于构建高性能服务器应用程序的 C++ 框架。 Seastar 支持构建使用 Linux 内核或 DPDK 进行网络连接的应用程序，因此它是进行此比较的完美框架。 我将以</description>
    </item>
    
    <item>
      <title>常用学习网站汇总(随时更新)</title>
      <link>https://logread.cn/post/study/summary/</link>
      <pubDate>Sat, 17 Jun 2023 22:47:44 +0800</pubDate>
      
      <guid>https://logread.cn/post/study/summary/</guid>
      <description>性能 P99 CONF 大会(P99分位数, 极致)是面向工程师和由工程师举办的跨行业虚拟活动，以低延迟、高性能设计为中心, 突出低延迟、高性能分布式计算所需的工程挑战和创造性解决方案 P99大会: https://www.p99conf.io/on-demand/ HPC高性能计算 Mochi 项目是阿贡国家实验室、洛斯阿拉莫斯国家实验室、卡内基梅隆大学和 HDF 集团之间的合作。 该项</description>
    </item>
    
    <item>
      <title>DAOS引擎启动流程-源码分析</title>
      <link>https://logread.cn/post/daos/daos_server_engine_start/</link>
      <pubDate>Thu, 01 Jun 2023 23:20:35 +0800</pubDate>
      
      <guid>https://logread.cn/post/daos/daos_server_engine_start/</guid>
      <description>执行:daos_server start, server通过golang调用engine的c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101</description>
    </item>
    
    <item>
      <title>谷歌文件系统</title>
      <link>https://logread.cn/post/fs/gfs_paper/</link>
      <pubDate>Tue, 30 May 2023 16:02:46 +0800</pubDate>
      
      <guid>https://logread.cn/post/fs/gfs_paper/</guid>
      <description>Google File System 谷歌文件系统 论文[译] The Google File System Sanjay Ghemawat, Howard Gobioff, and Shun Tak Leung Google 我们设计并实现了 Google 文件系统，这是一种可扩展的分布式文件系统，适用于大型分布式数据密集型应用程序。 它在廉价的商品硬件上运行时提供容错，并为大量客户端提供高聚合性能。虽然与以前的分布式文件系统有许多相同的目标，但我们的设计是由对我</description>
    </item>
    
    <item>
      <title>基于DOAS文件系统接口(DFS)暴露的SPDK块设备</title>
      <link>https://logread.cn/post/daos/daos_spdk_bdev/</link>
      <pubDate>Sat, 20 May 2023 11:17:30 +0800</pubDate>
      
      <guid>https://logread.cn/post/daos/daos_spdk_bdev/</guid>
      <description>基于DOAS文件系统(DFS后端)暴露的SPDK块设备 整体架构 步骤 编译daos, 记录daos安装目录, 比如/opt/daos, 启动daos_agent, daos_engine, daos_server 编译spdk git clone https://github.com/spdk/spdk.git git submodule update &amp;ndash;init ./configure &amp;ndash;with-daos #指定daos include目录和lib目录 make -j 16 启动spdk nvmf_tgt sudo HUGE_EVEN_ALLOC=yes scripts/setup.sh sudo ./build/bin/nvmf_tgt -m [21,22,23,24] 创建传输层 sudo ./scripts/rpc.py nvmf_create_transport</description>
    </item>
    
    <item>
      <title>Mercury为高性能计算启用远程过程调用(RPC)</title>
      <link>https://logread.cn/post/net/rpc/hg/mercury_enable_rpc_for_hpc/</link>
      <pubDate>Sat, 13 May 2023 10:06:46 +0800</pubDate>
      
      <guid>https://logread.cn/post/net/rpc/hg/mercury_enable_rpc_for_hpc/</guid>
      <description>Mercury为高性能计算启用远程过程调用(RPC) 摘要 ​ 远程过程调用（RPC）是分布式服务广泛使用的一种技术。 这种技术现在越来越多地用于高性能计算 (HPC) 的上下文中，它允许将例程的执行委托给远程节点，这些节点可以留出并专用于特定任务。 然而，现有的 RPC 框架采用基于套接字的网络接口（通常在</description>
    </item>
    
    <item>
      <title>MSGR2 协议（MSGR2.0 和 MSGR2.1）</title>
      <link>https://logread.cn/post/stor/ceph/ceph_msg/</link>
      <pubDate>Wed, 10 May 2023 14:01:46 +0800</pubDate>
      
      <guid>https://logread.cn/post/stor/ceph/ceph_msg/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 ceph文档 MSGR2 协议（MSGR2.0 和 MSGR2.1） 这是由 SimpleMessenger 实现的遗留 Ceph 在线协议的修订版。它解决了性能和安全问题。 目标 相对于原始协议，此协议修订版有几个目标： 灵活的握手。原始协议没有足够灵活的协议协商来允许不需要的功能。 加密。我们将通过网络整合加密。 表</description>
    </item>
    
    <item>
      <title>Linux_google_trace_dapper</title>
      <link>https://logread.cn/post/linux/trace/linux_google_trace_dapper/</link>
      <pubDate>Tue, 09 May 2023 20:42:51 +0800</pubDate>
      
      <guid>https://logread.cn/post/linux/trace/linux_google_trace_dapper/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 title 另一个设计目标是跟踪数据在生成后可快速用于分析：最好是在一分钟内。 尽管对数小时前的数据运行的跟踪分析系统仍然非常有价值，但可用的最新信息可以更快地对生产异常做出反应。 真正的应用程序级透明性，可能是我们最具挑战性的设计目标，是通过将 Dapper 的核心跟踪工具限制在</description>
    </item>
    
    <item>
      <title>OFA(开放Fabric联盟) - 利用最小CPU开销,为上层应用提供超高性能(线速),超低时延,最大带宽的开放组织</title>
      <link>https://logread.cn/post/ofa/ofa_librabric/</link>
      <pubDate>Mon, 01 May 2023 18:01:44 +0800</pubDate>
      
      <guid>https://logread.cn/post/ofa/ofa_librabric/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 OFA(开放Fabric联盟) - 利用最小CPU开销,为上层应用提供超高性能(线速),超低时延,最大带宽的开放组织 成员企业 OFA概览 OpenFabrics Alliance (OFA) 是一个基于开源的组织，负责开发、测试、许可、支持和分发 RDMA/Advanced Networks 软件以及 RDMA/Advanced Networks 软件的 OpenFabrics Enterprise Distribution。该联盟的使命</description>
    </item>
    
    <item>
      <title>利用 RDMA 技术加速 Ceph 存储解决方案</title>
      <link>https://logread.cn/post/storage/ceph_rdma/</link>
      <pubDate>Sun, 30 Apr 2023 11:21:44 +0800</pubDate>
      
      <guid>https://logread.cn/post/storage/ceph_rdma/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 利用 RDMA 技术加速 Ceph 存储解决方案 原创 晓兵XB 云原生云 2023-04-29 20:37 发表于四川 https://mp.weixin.qq.com/s/FCQMaDmumCHw8WElBsD18Q 在本文中，我们首先回顾了 Ceph* 4K I/O 工作负载中遇到的性能挑战，并对单个 Ceph OSD 对象存储守护进程 (OSD) 进程的 CPU 分布进行了简要分析。然后，我们讨论了现有 TCP/IP 堆栈中的低效问题，并介绍了英特尔® 以太网连接 X722 支持的 iWARP</description>
    </item>
    
    <item>
      <title>在存储性能开发套件 (SPDK) 中启用持久内存(PM)</title>
      <link>https://logread.cn/post/storage/spdk_pm/</link>
      <pubDate>Sun, 30 Apr 2023 11:16:16 +0800</pubDate>
      
      <guid>https://logread.cn/post/storage/spdk_pm/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 在存储性能开发套件 (SPDK) 中启用持久内存(PM) 原创 晓兵XB 云原生云 2023-04-30 10:21 发表于四川 https://mp.weixin.qq.com/s/trDKiEoYBjD8-1zhmEMYnA 背景 Optane 是一种内存系统，旨在通过桥接存储和 RAM 来提高硬盘驱动器 (HDD) 和速度较慢的 SATA SSD 的性能。 2022年7月, 英特尔首席执行官 Pat Gelsinger 将关闭 Optane 的决定归因于更广泛的行业转向 Compute Express Link (CXL) 架构 英特尔第</description>
    </item>
    
    <item>
      <title>Dpdk</title>
      <link>https://logread.cn/post/dpdk/dpdk/</link>
      <pubDate>Sun, 22 Jan 2023 13:39:51 +0800</pubDate>
      
      <guid>https://logread.cn/post/dpdk/dpdk/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 Data Plane Development Kit (DPDK) Data Plane Development Kit (DPDK) greatly boosts packet processing performance and throughput, allowing more time for data plane applications. DPDK can improve packet processing performance by up to ten times. DPDK software running on current generation Intel® Xeon® Processor E5-2658 v4, achieves 233 Gbps (347 Mpps) of L3 forwarding at 64-byte packet sizes.1 As a result, telecom and network equipment manufacturers (TEMs and NEMs) can lower development costs, use fewer tools and support teams, and get to market faster. 数据平面开发套件 (DPDK) 极大地提升了数据包处理性能和吞吐量，为数据平面应用</description>
    </item>
    
    <item>
      <title>Cart_rdma_hpc开源rpc传输层</title>
      <link>https://logread.cn/post/daos/cart_rdma_hpc%E5%BC%80%E6%BA%90rpc%E4%BC%A0%E8%BE%93%E5%B1%82/</link>
      <pubDate>Sun, 22 Jan 2023 11:20:30 +0800</pubDate>
      
      <guid>https://logread.cn/post/daos/cart_rdma_hpc%E5%BC%80%E6%BA%90rpc%E4%BC%A0%E8%BE%93%E5%B1%82/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 简介 分布式异步对象存储 (DAOS) 是一种开源软件定义的对象存储，专为大规模分布式非易失性内存 (NVM) 而设计。DAOS 利用存储级内存 (SCM) 和 NVM express (NVMe) 等下一代 NVM 技术，同时呈现键值存储接口并提供事务性非阻塞 I/O、高级数据保护和自我修复等功能 商品硬件、端到端数据完整性、细粒度数据控</description>
    </item>
    
    <item>
      <title>Spdk_blobstore编程指导</title>
      <link>https://logread.cn/post/spdk/spdk_blobstore%E7%BC%96%E7%A8%8B%E6%8C%87%E5%AF%BC/</link>
      <pubDate>Sun, 22 Jan 2023 11:17:53 +0800</pubDate>
      
      <guid>https://logread.cn/post/spdk/spdk_blobstore%E7%BC%96%E7%A8%8B%E6%8C%87%E5%AF%BC/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 Blobstore 编程指导 In this document @ref blob_pg_audience @ref blob_pg_intro @ref blob_pg_theory @ref blob_pg_design @ref blob_pg_examples @ref blob_pg_config @ref blob_pg_component Target Audience The programmer&amp;rsquo;s guide is intended for developers authoring applications that utilize the SPDK Blobstore. It is intended to supplement the source code in providing an overall understanding of how to integrate Blobstore into an application as well as provide some high level insight into how Blobstore works behind the scenes. It is not intended to serve as a design document or an API reference and in some cases source code snippets and high level sequences will be discussed; for the latest source code reference refer to the repo. 程序员指南适用于编写使用 SPDK Blobstore 的</description>
    </item>
    
    <item>
      <title>Spdk_nvme_of_target编程指导</title>
      <link>https://logread.cn/post/spdk/spdk_nvme_of_target%E7%BC%96%E7%A8%8B%E6%8C%87%E5%AF%BC/</link>
      <pubDate>Sun, 22 Jan 2023 11:14:33 +0800</pubDate>
      
      <guid>https://logread.cn/post/spdk/spdk_nvme_of_target%E7%BC%96%E7%A8%8B%E6%8C%87%E5%AF%BC/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 NVme over Fabrics: 也称为 NVMe-oF 和 non-volatile memory express over fabric，是一种协议规范，旨在使用 NVMe 协议通过网络结构将主机连接到存储。 该协议旨在通过网络在主机和目标固态存储设备或系统之间实现数据传输——通过基于 NVMe 消息的命令完成。 数据传输可以通过以太网、光纤通道 (FC) 或 InfiniBand 等方法传输 Target Audience This programming guide is intended</description>
    </item>
    
    <item>
      <title>Spdk提交io到nvme设备</title>
      <link>https://logread.cn/post/spdk/spdk%E6%8F%90%E4%BA%A4io%E5%88%B0nvme%E8%AE%BE%E5%A4%87/</link>
      <pubDate>Sun, 22 Jan 2023 11:09:02 +0800</pubDate>
      
      <guid>https://logread.cn/post/spdk/spdk%E6%8F%90%E4%BA%A4io%E5%88%B0nvme%E8%AE%BE%E5%A4%87/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 Submitting I/O to an NVMe Device 提交I/O到NVME设备 The NVMe Specification 规范 The NVMe specification describes a hardware interface for interacting with storage devices. The specification includes network transport definitions for remote storage as well as a hardware register layout for local PCIe devices. What follows here is an overview of how an I/O is submitted to a local PCIe device through SPDK. NVMe 规范描述了用于与存储设备交互的硬件接口。 该规范包括远程存储的网络传输定义以及本地 PCIe 设备的硬件寄存器布局。</description>
    </item>
    
    <item>
      <title>Bcache</title>
      <link>https://logread.cn/post/storage/cache/bcache/</link>
      <pubDate>Mon, 18 Apr 2022 15:34:25 +0800</pubDate>
      
      <guid>https://logread.cn/post/storage/cache/bcache/</guid>
      <description>Author 晓兵 weixin: ssbandjl 公众号: 云原生云 A block layer cache (bcache) What is bcache? Bcache is a Linux kernel block layer cache. It allows one or more fast disk drives such as flash-based solid state drives (SSDs) to act as a cache for one or more slower hard disk drives. Hard drives are cheap and big, SSDs are fast but small and expensive. Wouldn&amp;rsquo;t it be nice if you could transparently get the advantages of both? With Bcache, you can have your cake and eat it too. Bcache patches for the Linux kernel allow one to use SSDs to cache other block devices. It&amp;rsquo;s analogous to L2Arc for ZFS, but Bcache also does writeback caching (besides just write through caching), and it&amp;rsquo;s filesystem agnostic. It&amp;rsquo;s designed to be switched on with a minimum</description>
    </item>
    
    <item>
      <title>How to Use Linux Aio</title>
      <link>https://logread.cn/posts/how-to-use-linux-aio/</link>
      <pubDate>Sat, 16 Apr 2022 09:43:27 +0800</pubDate>
      
      <guid>https://logread.cn/posts/how-to-use-linux-aio/</guid>
      <description>linux-aio 参考链接 linux-aio io_submit man aio POSIX linux aio 实现概览 Introduction 简介 1 注意与POSIX语义的aio - POSIX asynchronous I/O overview POSIX异步I/O接口, 有区别 Note, Linux AIO is now subsumed by the io_uring API (tutorial, LWN coverage). The below explanation is mostly useful for old kernels. 请注意，Linux AIO 现在包含在 io_uring API（教程，LWN 覆盖范围）中。 下面的解释对旧内核最有用。 The Asynchronous Input/Output (AIO) interface allows many I/O requests to be submitted in parallel without the overhead</description>
    </item>
    
  </channel>
</rss>
